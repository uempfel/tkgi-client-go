// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterConfigParameters ClusterConfigParameters
//
// swagger:model ClusterConfigParameters
type ClusterConfigParameters struct {

	// custom ca
	CustomCa *Certificate `json:"custom_ca,omitempty"`

	// Whether or not disable the net_permissions
	DisableNetPermissions bool `json:"disable_net_permissions,omitempty"`

	// Whether or not disable the target_vsan_fileshare_datastore_urls
	DisableTargetVsanFileshareDatastoreUrls bool `json:"disable_target_vsan_fileshare_datastore_urls,omitempty"`

	// domain controller ip address
	DomainControllerIPAddress string `json:"domain_controller_ip_address,omitempty"`

	// domain fqdn
	DomainFqdn string `json:"domain_fqdn,omitempty"`

	// domain security group
	DomainSecurityGroup string `json:"domain_security_group,omitempty"`

	// domain service account
	DomainServiceAccount string `json:"domain_service_account,omitempty"`

	// domain user password
	DomainUserPassword string `json:"domain_user_password,omitempty"`

	// domain user username
	DomainUserUsername string `json:"domain_user_username,omitempty"`

	// only work for windows nodes
	EnableGmsa bool `json:"enable_gmsa,omitempty"`

	// If true, merge with global no-proxy from tile, else override global no-proxy
	GlobalNoProxyMerge bool `json:"global_no_proxy_merge,omitempty"`

	// http proxy
	HTTPProxy *ClusterProxy `json:"http_proxy,omitempty"`

	// https proxy
	HTTPSProxy *ClusterProxy `json:"https_proxy,omitempty"`

	// instance groups
	InstanceGroups []*InstanceGroup `json:"instance_groups"`

	// net permissions
	NetPermissions []*NetPermission `json:"net_permissions"`

	// no proxy
	NoProxy string `json:"no_proxy,omitempty"`

	// target vsan fileshare datastore urls
	TargetVsanFileshareDatastoreUrls string `json:"target_vsan_fileshare_datastore_urls,omitempty"`
}

// Validate validates this cluster config parameters
func (m *ClusterConfigParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomCa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetPermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigParameters) validateCustomCa(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomCa) { // not required
		return nil
	}

	if m.CustomCa != nil {
		if err := m.CustomCa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_ca")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_ca")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigParameters) validateHTTPProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPProxy) { // not required
		return nil
	}

	if m.HTTPProxy != nil {
		if err := m.HTTPProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigParameters) validateHTTPSProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPSProxy) { // not required
		return nil
	}

	if m.HTTPSProxy != nil {
		if err := m.HTTPSProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("https_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("https_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigParameters) validateInstanceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.InstanceGroups); i++ {
		if swag.IsZero(m.InstanceGroups[i]) { // not required
			continue
		}

		if m.InstanceGroups[i] != nil {
			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterConfigParameters) validateNetPermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.NetPermissions) { // not required
		return nil
	}

	for i := 0; i < len(m.NetPermissions); i++ {
		if swag.IsZero(m.NetPermissions[i]) { // not required
			continue
		}

		if m.NetPermissions[i] != nil {
			if err := m.NetPermissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("net_permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("net_permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster config parameters based on the context it is used
func (m *ClusterConfigParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomCa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPSProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigParameters) contextValidateCustomCa(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomCa != nil {
		if err := m.CustomCa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_ca")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_ca")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigParameters) contextValidateHTTPProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPProxy != nil {
		if err := m.HTTPProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigParameters) contextValidateHTTPSProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPSProxy != nil {
		if err := m.HTTPSProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("https_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("https_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigParameters) contextValidateInstanceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceGroups); i++ {

		if m.InstanceGroups[i] != nil {
			if err := m.InstanceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterConfigParameters) contextValidateNetPermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetPermissions); i++ {

		if m.NetPermissions[i] != nil {
			if err := m.NetPermissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("net_permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("net_permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigParameters) UnmarshalBinary(b []byte) error {
	var res ClusterConfigParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
