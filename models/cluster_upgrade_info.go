// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterUpgradeInfo ClusterUpgradeInfo
//
// swagger:model ClusterUpgradeInfo
type ClusterUpgradeInfo struct {

	// cluster name
	ClusterName string `json:"cluster_name,omitempty"`

	// end time
	EndTime int64 `json:"end_time,omitempty"`

	// is canary
	IsCanary bool `json:"is_canary,omitempty"`

	// last action
	// Enum: [CREATE UPDATE DELETE UPGRADE]
	LastAction string `json:"last_action,omitempty"`

	// last action state
	// Enum: [in progress succeeded failed queued]
	LastActionState string `json:"last_action_state,omitempty"`

	// start time
	StartTime int64 `json:"start_time,omitempty"`
}

// Validate validates this cluster upgrade info
func (m *ClusterUpgradeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActionState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterUpgradeInfoTypeLastActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","UPDATE","DELETE","UPGRADE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterUpgradeInfoTypeLastActionPropEnum = append(clusterUpgradeInfoTypeLastActionPropEnum, v)
	}
}

const (

	// ClusterUpgradeInfoLastActionCREATE captures enum value "CREATE"
	ClusterUpgradeInfoLastActionCREATE string = "CREATE"

	// ClusterUpgradeInfoLastActionUPDATE captures enum value "UPDATE"
	ClusterUpgradeInfoLastActionUPDATE string = "UPDATE"

	// ClusterUpgradeInfoLastActionDELETE captures enum value "DELETE"
	ClusterUpgradeInfoLastActionDELETE string = "DELETE"

	// ClusterUpgradeInfoLastActionUPGRADE captures enum value "UPGRADE"
	ClusterUpgradeInfoLastActionUPGRADE string = "UPGRADE"
)

// prop value enum
func (m *ClusterUpgradeInfo) validateLastActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterUpgradeInfoTypeLastActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterUpgradeInfo) validateLastAction(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastActionEnum("last_action", "body", m.LastAction); err != nil {
		return err
	}

	return nil
}

var clusterUpgradeInfoTypeLastActionStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["in progress","succeeded","failed","queued"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterUpgradeInfoTypeLastActionStatePropEnum = append(clusterUpgradeInfoTypeLastActionStatePropEnum, v)
	}
}

const (

	// ClusterUpgradeInfoLastActionStateInProgress captures enum value "in progress"
	ClusterUpgradeInfoLastActionStateInProgress string = "in progress"

	// ClusterUpgradeInfoLastActionStateSucceeded captures enum value "succeeded"
	ClusterUpgradeInfoLastActionStateSucceeded string = "succeeded"

	// ClusterUpgradeInfoLastActionStateFailed captures enum value "failed"
	ClusterUpgradeInfoLastActionStateFailed string = "failed"

	// ClusterUpgradeInfoLastActionStateQueued captures enum value "queued"
	ClusterUpgradeInfoLastActionStateQueued string = "queued"
)

// prop value enum
func (m *ClusterUpgradeInfo) validateLastActionStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterUpgradeInfoTypeLastActionStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterUpgradeInfo) validateLastActionState(formats strfmt.Registry) error {
	if swag.IsZero(m.LastActionState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastActionStateEnum("last_action_state", "body", m.LastActionState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster upgrade info based on context it is used
func (m *ClusterUpgradeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterUpgradeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterUpgradeInfo) UnmarshalBinary(b []byte) error {
	var res ClusterUpgradeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
