// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan Plan
//
// swagger:model Plan
type Plan struct {

	// allow privileged containers
	// Required: true
	AllowPrivilegedContainers *bool `json:"allow-privileged-containers"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// master instances
	// Required: true
	MasterInstances *int32 `json:"master_instances"`

	// name
	// Required: true
	Name *string `json:"name"`

	// worker instances
	// Required: true
	WorkerInstances *int32 `json:"worker_instances"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowPrivilegedContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateAllowPrivilegedContainers(formats strfmt.Registry) error {

	if err := validate.Required("allow-privileged-containers", "body", m.AllowPrivilegedContainers); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateMasterInstances(formats strfmt.Registry) error {

	if err := validate.Required("master_instances", "body", m.MasterInstances); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateWorkerInstances(formats strfmt.Registry) error {

	if err := validate.Required("worker_instances", "body", m.WorkerInstances); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this plan based on context it is used
func (m *Plan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
