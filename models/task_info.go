// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskInfo TaskInfo
//
// swagger:model TaskInfo
type TaskInfo struct {

	// clusters
	Clusters []*ClusterUpgradeInfo `json:"clusters"`

	// end time
	EndTime int64 `json:"end_time,omitempty"`

	// start time
	StartTime int64 `json:"start_time,omitempty"`

	// status
	// Enum: [not started in progress canceled done]
	Status string `json:"status,omitempty"`

	// The type of a task
	// Enum: [UPGRADE]
	Type string `json:"type,omitempty"`

	// The uuid of a task
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this task info
func (m *TaskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskInfo) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var taskInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not started","in progress","canceled","done"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskInfoTypeStatusPropEnum = append(taskInfoTypeStatusPropEnum, v)
	}
}

const (

	// TaskInfoStatusNotStarted captures enum value "not started"
	TaskInfoStatusNotStarted string = "not started"

	// TaskInfoStatusInProgress captures enum value "in progress"
	TaskInfoStatusInProgress string = "in progress"

	// TaskInfoStatusCanceled captures enum value "canceled"
	TaskInfoStatusCanceled string = "canceled"

	// TaskInfoStatusDone captures enum value "done"
	TaskInfoStatusDone string = "done"
)

// prop value enum
func (m *TaskInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var taskInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UPGRADE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskInfoTypeTypePropEnum = append(taskInfoTypeTypePropEnum, v)
	}
}

const (

	// TaskInfoTypeUPGRADE captures enum value "UPGRADE"
	TaskInfoTypeUPGRADE string = "UPGRADE"
)

// prop value enum
func (m *TaskInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task info based on the context it is used
func (m *TaskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskInfo) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskInfo) UnmarshalBinary(b []byte) error {
	var res TaskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
