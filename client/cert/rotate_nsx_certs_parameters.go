// Code generated by go-swagger; DO NOT EDIT.

package cert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRotateNsxCertsParams creates a new RotateNsxCertsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRotateNsxCertsParams() *RotateNsxCertsParams {
	return &RotateNsxCertsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRotateNsxCertsParamsWithTimeout creates a new RotateNsxCertsParams object
// with the ability to set a timeout on a request.
func NewRotateNsxCertsParamsWithTimeout(timeout time.Duration) *RotateNsxCertsParams {
	return &RotateNsxCertsParams{
		timeout: timeout,
	}
}

// NewRotateNsxCertsParamsWithContext creates a new RotateNsxCertsParams object
// with the ability to set a context for a request.
func NewRotateNsxCertsParamsWithContext(ctx context.Context) *RotateNsxCertsParams {
	return &RotateNsxCertsParams{
		Context: ctx,
	}
}

// NewRotateNsxCertsParamsWithHTTPClient creates a new RotateNsxCertsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRotateNsxCertsParamsWithHTTPClient(client *http.Client) *RotateNsxCertsParams {
	return &RotateNsxCertsParams{
		HTTPClient: client,
	}
}

/* RotateNsxCertsParams contains all the parameters to send to the API endpoint
   for the rotate nsx certs operation.

   Typically these are written to a http.Request.
*/
type RotateNsxCertsParams struct {

	/* ClusterName.

	   The cluster name
	*/
	ClusterName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the rotate nsx certs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RotateNsxCertsParams) WithDefaults() *RotateNsxCertsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the rotate nsx certs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RotateNsxCertsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the rotate nsx certs params
func (o *RotateNsxCertsParams) WithTimeout(timeout time.Duration) *RotateNsxCertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rotate nsx certs params
func (o *RotateNsxCertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rotate nsx certs params
func (o *RotateNsxCertsParams) WithContext(ctx context.Context) *RotateNsxCertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rotate nsx certs params
func (o *RotateNsxCertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rotate nsx certs params
func (o *RotateNsxCertsParams) WithHTTPClient(client *http.Client) *RotateNsxCertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rotate nsx certs params
func (o *RotateNsxCertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterName adds the clusterName to the rotate nsx certs params
func (o *RotateNsxCertsParams) WithClusterName(clusterName string) *RotateNsxCertsParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the rotate nsx certs params
func (o *RotateNsxCertsParams) SetClusterName(clusterName string) {
	o.ClusterName = clusterName
}

// WriteToRequest writes these params to a swagger request
func (o *RotateNsxCertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterName
	if err := r.SetPathParam("clusterName", o.ClusterName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
