// Code generated by go-swagger; DO NOT EDIT.

package cert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cert API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cert API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ListCertificates(params *ListCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCertificatesOK, error)

	RotateNsxCerts(params *RotateNsxCertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RotateNsxCertsOK, *RotateNsxCertsCreated, *RotateNsxCertsAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ListCertificates lists certificates
*/
func (a *Client) ListCertificates(params *ListCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCertificates",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterName}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCertificates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RotateNsxCerts rotates nsx certs
*/
func (a *Client) RotateNsxCerts(params *RotateNsxCertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RotateNsxCertsOK, *RotateNsxCertsCreated, *RotateNsxCertsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateNsxCertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rotateNsxCerts",
		Method:             "PUT",
		PathPattern:        "/v1/clusters/{clusterName}/rotateNsxCerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotateNsxCertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RotateNsxCertsOK:
		return value, nil, nil, nil
	case *RotateNsxCertsCreated:
		return nil, value, nil, nil
	case *RotateNsxCertsAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
