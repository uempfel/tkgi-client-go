// Code generated by go-swagger; DO NOT EDIT.

package operation_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operation handler API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operation handler API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HandleUsingGET(params *HandleUsingGETParams, opts ...ClientOption) (*HandleUsingGETOK, error)

	HandleUsingGET1(params *HandleUsingGET1Params, opts ...ClientOption) (*HandleUsingGET1OK, error)

	HandleUsingGET2(params *HandleUsingGET2Params, opts ...ClientOption) (*HandleUsingGET2OK, error)

	HandleUsingGET3(params *HandleUsingGET3Params, opts ...ClientOption) (*HandleUsingGET3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HandleUsingGET handles
*/
func (a *Client) HandleUsingGET(params *HandleUsingGETParams, opts ...ClientOption) (*HandleUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "handleUsingGET",
		Method:             "GET",
		PathPattern:        "/actuator/health/{component}/{instance}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.spring-boot.actuator.v2+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for handleUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleUsingGET1 handles
*/
func (a *Client) HandleUsingGET1(params *HandleUsingGET1Params, opts ...ClientOption) (*HandleUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "handleUsingGET_1",
		Method:             "GET",
		PathPattern:        "/actuator/health/{component}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.spring-boot.actuator.v2+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for handleUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleUsingGET2 handles
*/
func (a *Client) HandleUsingGET2(params *HandleUsingGET2Params, opts ...ClientOption) (*HandleUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "handleUsingGET_2",
		Method:             "GET",
		PathPattern:        "/actuator/health",
		ProducesMediaTypes: []string{"application/json", "application/vnd.spring-boot.actuator.v2+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for handleUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HandleUsingGET3 handles
*/
func (a *Client) HandleUsingGET3(params *HandleUsingGET3Params, opts ...ClientOption) (*HandleUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "handleUsingGET_3",
		Method:             "GET",
		PathPattern:        "/actuator/info",
		ProducesMediaTypes: []string{"application/json", "application/vnd.spring-boot.actuator.v2+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for handleUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
