// Code generated by go-swagger; DO NOT EDIT.

package operation_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HandleUsingGETReader is a Reader for the HandleUsingGET structure.
type HandleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHandleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHandleUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandleUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHandleUsingGETOK creates a HandleUsingGETOK with default headers values
func NewHandleUsingGETOK() *HandleUsingGETOK {
	return &HandleUsingGETOK{}
}

/* HandleUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type HandleUsingGETOK struct {
	Payload interface{}
}

func (o *HandleUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}/{instance}][%d] handleUsingGETOK  %+v", 200, o.Payload)
}
func (o *HandleUsingGETOK) GetPayload() interface{} {
	return o.Payload
}

func (o *HandleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleUsingGETUnauthorized creates a HandleUsingGETUnauthorized with default headers values
func NewHandleUsingGETUnauthorized() *HandleUsingGETUnauthorized {
	return &HandleUsingGETUnauthorized{}
}

/* HandleUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HandleUsingGETUnauthorized struct {
}

func (o *HandleUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}/{instance}][%d] handleUsingGETUnauthorized ", 401)
}

func (o *HandleUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGETForbidden creates a HandleUsingGETForbidden with default headers values
func NewHandleUsingGETForbidden() *HandleUsingGETForbidden {
	return &HandleUsingGETForbidden{}
}

/* HandleUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandleUsingGETForbidden struct {
}

func (o *HandleUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}/{instance}][%d] handleUsingGETForbidden ", 403)
}

func (o *HandleUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGETNotFound creates a HandleUsingGETNotFound with default headers values
func NewHandleUsingGETNotFound() *HandleUsingGETNotFound {
	return &HandleUsingGETNotFound{}
}

/* HandleUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandleUsingGETNotFound struct {
}

func (o *HandleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}/{instance}][%d] handleUsingGETNotFound ", 404)
}

func (o *HandleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
