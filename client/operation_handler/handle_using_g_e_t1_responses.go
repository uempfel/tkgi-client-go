// Code generated by go-swagger; DO NOT EDIT.

package operation_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HandleUsingGET1Reader is a Reader for the HandleUsingGET1 structure.
type HandleUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHandleUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHandleUsingGET1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandleUsingGET1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandleUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHandleUsingGET1OK creates a HandleUsingGET1OK with default headers values
func NewHandleUsingGET1OK() *HandleUsingGET1OK {
	return &HandleUsingGET1OK{}
}

/* HandleUsingGET1OK describes a response with status code 200, with default header values.

OK
*/
type HandleUsingGET1OK struct {
	Payload interface{}
}

func (o *HandleUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}][%d] handleUsingGET1OK  %+v", 200, o.Payload)
}
func (o *HandleUsingGET1OK) GetPayload() interface{} {
	return o.Payload
}

func (o *HandleUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleUsingGET1Unauthorized creates a HandleUsingGET1Unauthorized with default headers values
func NewHandleUsingGET1Unauthorized() *HandleUsingGET1Unauthorized {
	return &HandleUsingGET1Unauthorized{}
}

/* HandleUsingGET1Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HandleUsingGET1Unauthorized struct {
}

func (o *HandleUsingGET1Unauthorized) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}][%d] handleUsingGET1Unauthorized ", 401)
}

func (o *HandleUsingGET1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGET1Forbidden creates a HandleUsingGET1Forbidden with default headers values
func NewHandleUsingGET1Forbidden() *HandleUsingGET1Forbidden {
	return &HandleUsingGET1Forbidden{}
}

/* HandleUsingGET1Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandleUsingGET1Forbidden struct {
}

func (o *HandleUsingGET1Forbidden) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}][%d] handleUsingGET1Forbidden ", 403)
}

func (o *HandleUsingGET1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGET1NotFound creates a HandleUsingGET1NotFound with default headers values
func NewHandleUsingGET1NotFound() *HandleUsingGET1NotFound {
	return &HandleUsingGET1NotFound{}
}

/* HandleUsingGET1NotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandleUsingGET1NotFound struct {
}

func (o *HandleUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /actuator/health/{component}][%d] handleUsingGET1NotFound ", 404)
}

func (o *HandleUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
