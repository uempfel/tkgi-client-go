// Code generated by go-swagger; DO NOT EDIT.

package operation_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HandleUsingGET3Reader is a Reader for the HandleUsingGET3 structure.
type HandleUsingGET3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleUsingGET3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHandleUsingGET3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHandleUsingGET3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandleUsingGET3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandleUsingGET3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHandleUsingGET3OK creates a HandleUsingGET3OK with default headers values
func NewHandleUsingGET3OK() *HandleUsingGET3OK {
	return &HandleUsingGET3OK{}
}

/* HandleUsingGET3OK describes a response with status code 200, with default header values.

OK
*/
type HandleUsingGET3OK struct {
	Payload interface{}
}

func (o *HandleUsingGET3OK) Error() string {
	return fmt.Sprintf("[GET /actuator/info][%d] handleUsingGET3OK  %+v", 200, o.Payload)
}
func (o *HandleUsingGET3OK) GetPayload() interface{} {
	return o.Payload
}

func (o *HandleUsingGET3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleUsingGET3Unauthorized creates a HandleUsingGET3Unauthorized with default headers values
func NewHandleUsingGET3Unauthorized() *HandleUsingGET3Unauthorized {
	return &HandleUsingGET3Unauthorized{}
}

/* HandleUsingGET3Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HandleUsingGET3Unauthorized struct {
}

func (o *HandleUsingGET3Unauthorized) Error() string {
	return fmt.Sprintf("[GET /actuator/info][%d] handleUsingGET3Unauthorized ", 401)
}

func (o *HandleUsingGET3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGET3Forbidden creates a HandleUsingGET3Forbidden with default headers values
func NewHandleUsingGET3Forbidden() *HandleUsingGET3Forbidden {
	return &HandleUsingGET3Forbidden{}
}

/* HandleUsingGET3Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandleUsingGET3Forbidden struct {
}

func (o *HandleUsingGET3Forbidden) Error() string {
	return fmt.Sprintf("[GET /actuator/info][%d] handleUsingGET3Forbidden ", 403)
}

func (o *HandleUsingGET3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGET3NotFound creates a HandleUsingGET3NotFound with default headers values
func NewHandleUsingGET3NotFound() *HandleUsingGET3NotFound {
	return &HandleUsingGET3NotFound{}
}

/* HandleUsingGET3NotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandleUsingGET3NotFound struct {
}

func (o *HandleUsingGET3NotFound) Error() string {
	return fmt.Sprintf("[GET /actuator/info][%d] handleUsingGET3NotFound ", 404)
}

func (o *HandleUsingGET3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
