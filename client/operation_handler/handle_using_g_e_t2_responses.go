// Code generated by go-swagger; DO NOT EDIT.

package operation_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HandleUsingGET2Reader is a Reader for the HandleUsingGET2 structure.
type HandleUsingGET2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleUsingGET2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHandleUsingGET2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHandleUsingGET2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandleUsingGET2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandleUsingGET2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHandleUsingGET2OK creates a HandleUsingGET2OK with default headers values
func NewHandleUsingGET2OK() *HandleUsingGET2OK {
	return &HandleUsingGET2OK{}
}

/* HandleUsingGET2OK describes a response with status code 200, with default header values.

OK
*/
type HandleUsingGET2OK struct {
	Payload interface{}
}

func (o *HandleUsingGET2OK) Error() string {
	return fmt.Sprintf("[GET /actuator/health][%d] handleUsingGET2OK  %+v", 200, o.Payload)
}
func (o *HandleUsingGET2OK) GetPayload() interface{} {
	return o.Payload
}

func (o *HandleUsingGET2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleUsingGET2Unauthorized creates a HandleUsingGET2Unauthorized with default headers values
func NewHandleUsingGET2Unauthorized() *HandleUsingGET2Unauthorized {
	return &HandleUsingGET2Unauthorized{}
}

/* HandleUsingGET2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HandleUsingGET2Unauthorized struct {
}

func (o *HandleUsingGET2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /actuator/health][%d] handleUsingGET2Unauthorized ", 401)
}

func (o *HandleUsingGET2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGET2Forbidden creates a HandleUsingGET2Forbidden with default headers values
func NewHandleUsingGET2Forbidden() *HandleUsingGET2Forbidden {
	return &HandleUsingGET2Forbidden{}
}

/* HandleUsingGET2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandleUsingGET2Forbidden struct {
}

func (o *HandleUsingGET2Forbidden) Error() string {
	return fmt.Sprintf("[GET /actuator/health][%d] handleUsingGET2Forbidden ", 403)
}

func (o *HandleUsingGET2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleUsingGET2NotFound creates a HandleUsingGET2NotFound with default headers values
func NewHandleUsingGET2NotFound() *HandleUsingGET2NotFound {
	return &HandleUsingGET2NotFound{}
}

/* HandleUsingGET2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandleUsingGET2NotFound struct {
}

func (o *HandleUsingGET2NotFound) Error() string {
	return fmt.Sprintf("[GET /actuator/health][%d] handleUsingGET2NotFound ", 404)
}

func (o *HandleUsingGET2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
