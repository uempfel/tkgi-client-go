// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// ListUsagesReader is a Reader for the ListUsages structure.
type ListUsagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListUsagesOK creates a ListUsagesOK with default headers values
func NewListUsagesOK() *ListUsagesOK {
	return &ListUsagesOK{}
}

/* ListUsagesOK describes a response with status code 200, with default header values.

Listed successfully
*/
type ListUsagesOK struct {
	Payload []*models.Usage
}

func (o *ListUsagesOK) Error() string {
	return fmt.Sprintf("[GET /v1/usages][%d] listUsagesOK  %+v", 200, o.Payload)
}
func (o *ListUsagesOK) GetPayload() []*models.Usage {
	return o.Payload
}

func (o *ListUsagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsagesUnauthorized creates a ListUsagesUnauthorized with default headers values
func NewListUsagesUnauthorized() *ListUsagesUnauthorized {
	return &ListUsagesUnauthorized{}
}

/* ListUsagesUnauthorized describes a response with status code 401, with default header values.

Authentication failure. Please check credentials and try again.
*/
type ListUsagesUnauthorized struct {
}

func (o *ListUsagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/usages][%d] listUsagesUnauthorized ", 401)
}

func (o *ListUsagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsagesForbidden creates a ListUsagesForbidden with default headers values
func NewListUsagesForbidden() *ListUsagesForbidden {
	return &ListUsagesForbidden{}
}

/* ListUsagesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUsagesForbidden struct {
}

func (o *ListUsagesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/usages][%d] listUsagesForbidden ", 403)
}

func (o *ListUsagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsagesNotFound creates a ListUsagesNotFound with default headers values
func NewListUsagesNotFound() *ListUsagesNotFound {
	return &ListUsagesNotFound{}
}

/* ListUsagesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListUsagesNotFound struct {
}

func (o *ListUsagesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/usages][%d] listUsagesNotFound ", 404)
}

func (o *ListUsagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
