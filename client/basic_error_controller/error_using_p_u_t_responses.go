// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ErrorUsingPUTReader is a Reader for the ErrorUsingPUT structure.
type ErrorUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewErrorUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewErrorUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewErrorUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewErrorUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewErrorUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewErrorUsingPUTOK creates a ErrorUsingPUTOK with default headers values
func NewErrorUsingPUTOK() *ErrorUsingPUTOK {
	return &ErrorUsingPUTOK{}
}

/* ErrorUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type ErrorUsingPUTOK struct {
	Payload map[string]interface{}
}

func (o *ErrorUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorUsingPUTOK  %+v", 200, o.Payload)
}
func (o *ErrorUsingPUTOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *ErrorUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorUsingPUTCreated creates a ErrorUsingPUTCreated with default headers values
func NewErrorUsingPUTCreated() *ErrorUsingPUTCreated {
	return &ErrorUsingPUTCreated{}
}

/* ErrorUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type ErrorUsingPUTCreated struct {
}

func (o *ErrorUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorUsingPUTCreated ", 201)
}

func (o *ErrorUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingPUTUnauthorized creates a ErrorUsingPUTUnauthorized with default headers values
func NewErrorUsingPUTUnauthorized() *ErrorUsingPUTUnauthorized {
	return &ErrorUsingPUTUnauthorized{}
}

/* ErrorUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ErrorUsingPUTUnauthorized struct {
}

func (o *ErrorUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorUsingPUTUnauthorized ", 401)
}

func (o *ErrorUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingPUTForbidden creates a ErrorUsingPUTForbidden with default headers values
func NewErrorUsingPUTForbidden() *ErrorUsingPUTForbidden {
	return &ErrorUsingPUTForbidden{}
}

/* ErrorUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ErrorUsingPUTForbidden struct {
}

func (o *ErrorUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorUsingPUTForbidden ", 403)
}

func (o *ErrorUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingPUTNotFound creates a ErrorUsingPUTNotFound with default headers values
func NewErrorUsingPUTNotFound() *ErrorUsingPUTNotFound {
	return &ErrorUsingPUTNotFound{}
}

/* ErrorUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ErrorUsingPUTNotFound struct {
}

func (o *ErrorUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorUsingPUTNotFound ", 404)
}

func (o *ErrorUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
