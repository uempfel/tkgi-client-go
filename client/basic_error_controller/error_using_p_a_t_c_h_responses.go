// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ErrorUsingPATCHReader is a Reader for the ErrorUsingPATCH structure.
type ErrorUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewErrorUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewErrorUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewErrorUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewErrorUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewErrorUsingPATCHOK creates a ErrorUsingPATCHOK with default headers values
func NewErrorUsingPATCHOK() *ErrorUsingPATCHOK {
	return &ErrorUsingPATCHOK{}
}

/* ErrorUsingPATCHOK describes a response with status code 200, with default header values.

OK
*/
type ErrorUsingPATCHOK struct {
	Payload map[string]interface{}
}

func (o *ErrorUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorUsingPATCHOK  %+v", 200, o.Payload)
}
func (o *ErrorUsingPATCHOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *ErrorUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorUsingPATCHNoContent creates a ErrorUsingPATCHNoContent with default headers values
func NewErrorUsingPATCHNoContent() *ErrorUsingPATCHNoContent {
	return &ErrorUsingPATCHNoContent{}
}

/* ErrorUsingPATCHNoContent describes a response with status code 204, with default header values.

No Content
*/
type ErrorUsingPATCHNoContent struct {
}

func (o *ErrorUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorUsingPATCHNoContent ", 204)
}

func (o *ErrorUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingPATCHUnauthorized creates a ErrorUsingPATCHUnauthorized with default headers values
func NewErrorUsingPATCHUnauthorized() *ErrorUsingPATCHUnauthorized {
	return &ErrorUsingPATCHUnauthorized{}
}

/* ErrorUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ErrorUsingPATCHUnauthorized struct {
}

func (o *ErrorUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorUsingPATCHUnauthorized ", 401)
}

func (o *ErrorUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingPATCHForbidden creates a ErrorUsingPATCHForbidden with default headers values
func NewErrorUsingPATCHForbidden() *ErrorUsingPATCHForbidden {
	return &ErrorUsingPATCHForbidden{}
}

/* ErrorUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ErrorUsingPATCHForbidden struct {
}

func (o *ErrorUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorUsingPATCHForbidden ", 403)
}

func (o *ErrorUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
