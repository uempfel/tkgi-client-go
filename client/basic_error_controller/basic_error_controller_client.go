// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new basic error controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for basic error controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ErrorUsingDELETE(params *ErrorUsingDELETEParams, opts ...ClientOption) (*ErrorUsingDELETEOK, *ErrorUsingDELETENoContent, error)

	ErrorUsingGET(params *ErrorUsingGETParams, opts ...ClientOption) (*ErrorUsingGETOK, error)

	ErrorUsingHEAD(params *ErrorUsingHEADParams, opts ...ClientOption) (*ErrorUsingHEADOK, *ErrorUsingHEADNoContent, error)

	ErrorUsingOPTIONS(params *ErrorUsingOPTIONSParams, opts ...ClientOption) (*ErrorUsingOPTIONSOK, *ErrorUsingOPTIONSNoContent, error)

	ErrorUsingPATCH(params *ErrorUsingPATCHParams, opts ...ClientOption) (*ErrorUsingPATCHOK, *ErrorUsingPATCHNoContent, error)

	ErrorUsingPOST(params *ErrorUsingPOSTParams, opts ...ClientOption) (*ErrorUsingPOSTOK, *ErrorUsingPOSTCreated, error)

	ErrorUsingPUT(params *ErrorUsingPUTParams, opts ...ClientOption) (*ErrorUsingPUTOK, *ErrorUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ErrorUsingDELETE errors
*/
func (a *Client) ErrorUsingDELETE(params *ErrorUsingDELETEParams, opts ...ClientOption) (*ErrorUsingDELETEOK, *ErrorUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorUsingDELETEOK:
		return value, nil, nil
	case *ErrorUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for basic_error_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ErrorUsingGET errors
*/
func (a *Client) ErrorUsingGET(params *ErrorUsingGETParams, opts ...ClientOption) (*ErrorUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingGET",
		Method:             "GET",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErrorUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for errorUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ErrorUsingHEAD errors
*/
func (a *Client) ErrorUsingHEAD(params *ErrorUsingHEADParams, opts ...ClientOption) (*ErrorUsingHEADOK, *ErrorUsingHEADNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingHEADParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingHEAD",
		Method:             "HEAD",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingHEADReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorUsingHEADOK:
		return value, nil, nil
	case *ErrorUsingHEADNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for basic_error_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ErrorUsingOPTIONS errors
*/
func (a *Client) ErrorUsingOPTIONS(params *ErrorUsingOPTIONSParams, opts ...ClientOption) (*ErrorUsingOPTIONSOK, *ErrorUsingOPTIONSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingOPTIONSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingOPTIONS",
		Method:             "OPTIONS",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingOPTIONSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorUsingOPTIONSOK:
		return value, nil, nil
	case *ErrorUsingOPTIONSNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for basic_error_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ErrorUsingPATCH errors
*/
func (a *Client) ErrorUsingPATCH(params *ErrorUsingPATCHParams, opts ...ClientOption) (*ErrorUsingPATCHOK, *ErrorUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorUsingPATCHOK:
		return value, nil, nil
	case *ErrorUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for basic_error_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ErrorUsingPOST errors
*/
func (a *Client) ErrorUsingPOST(params *ErrorUsingPOSTParams, opts ...ClientOption) (*ErrorUsingPOSTOK, *ErrorUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingPOST",
		Method:             "POST",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorUsingPOSTOK:
		return value, nil, nil
	case *ErrorUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for basic_error_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ErrorUsingPUT errors
*/
func (a *Client) ErrorUsingPUT(params *ErrorUsingPUTParams, opts ...ClientOption) (*ErrorUsingPUTOK, *ErrorUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "errorUsingPUT",
		Method:             "PUT",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErrorUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorUsingPUTOK:
		return value, nil, nil
	case *ErrorUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for basic_error_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
