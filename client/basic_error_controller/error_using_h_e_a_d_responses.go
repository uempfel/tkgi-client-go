// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ErrorUsingHEADReader is a Reader for the ErrorUsingHEAD structure.
type ErrorUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewErrorUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewErrorUsingHEADNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewErrorUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewErrorUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewErrorUsingHEADOK creates a ErrorUsingHEADOK with default headers values
func NewErrorUsingHEADOK() *ErrorUsingHEADOK {
	return &ErrorUsingHEADOK{}
}

/* ErrorUsingHEADOK describes a response with status code 200, with default header values.

OK
*/
type ErrorUsingHEADOK struct {
	Payload map[string]interface{}
}

func (o *ErrorUsingHEADOK) Error() string {
	return fmt.Sprintf("[HEAD /error][%d] errorUsingHEADOK  %+v", 200, o.Payload)
}
func (o *ErrorUsingHEADOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *ErrorUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorUsingHEADNoContent creates a ErrorUsingHEADNoContent with default headers values
func NewErrorUsingHEADNoContent() *ErrorUsingHEADNoContent {
	return &ErrorUsingHEADNoContent{}
}

/* ErrorUsingHEADNoContent describes a response with status code 204, with default header values.

No Content
*/
type ErrorUsingHEADNoContent struct {
}

func (o *ErrorUsingHEADNoContent) Error() string {
	return fmt.Sprintf("[HEAD /error][%d] errorUsingHEADNoContent ", 204)
}

func (o *ErrorUsingHEADNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingHEADUnauthorized creates a ErrorUsingHEADUnauthorized with default headers values
func NewErrorUsingHEADUnauthorized() *ErrorUsingHEADUnauthorized {
	return &ErrorUsingHEADUnauthorized{}
}

/* ErrorUsingHEADUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ErrorUsingHEADUnauthorized struct {
}

func (o *ErrorUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /error][%d] errorUsingHEADUnauthorized ", 401)
}

func (o *ErrorUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorUsingHEADForbidden creates a ErrorUsingHEADForbidden with default headers values
func NewErrorUsingHEADForbidden() *ErrorUsingHEADForbidden {
	return &ErrorUsingHEADForbidden{}
}

/* ErrorUsingHEADForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ErrorUsingHEADForbidden struct {
}

func (o *ErrorUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /error][%d] errorUsingHEADForbidden ", 403)
}

func (o *ErrorUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
