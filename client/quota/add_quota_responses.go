// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// AddQuotaReader is a Reader for the AddQuota structure.
type AddQuotaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddQuotaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddQuotaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddQuotaCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddQuotaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddQuotaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddQuotaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddQuotaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddQuotaConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddQuotaUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddQuotaOK creates a AddQuotaOK with default headers values
func NewAddQuotaOK() *AddQuotaOK {
	return &AddQuotaOK{}
}

/* AddQuotaOK describes a response with status code 200, with default header values.

OK
*/
type AddQuotaOK struct {
	Payload *models.Quota
}

func (o *AddQuotaOK) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaOK  %+v", 200, o.Payload)
}
func (o *AddQuotaOK) GetPayload() *models.Quota {
	return o.Payload
}

func (o *AddQuotaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Quota)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddQuotaCreated creates a AddQuotaCreated with default headers values
func NewAddQuotaCreated() *AddQuotaCreated {
	return &AddQuotaCreated{}
}

/* AddQuotaCreated describes a response with status code 201, with default header values.

Successful operation
*/
type AddQuotaCreated struct {
	Payload *models.Quota
}

func (o *AddQuotaCreated) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaCreated  %+v", 201, o.Payload)
}
func (o *AddQuotaCreated) GetPayload() *models.Quota {
	return o.Payload
}

func (o *AddQuotaCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Quota)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddQuotaBadRequest creates a AddQuotaBadRequest with default headers values
func NewAddQuotaBadRequest() *AddQuotaBadRequest {
	return &AddQuotaBadRequest{}
}

/* AddQuotaBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddQuotaBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *AddQuotaBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaBadRequest  %+v", 400, o.Payload)
}
func (o *AddQuotaBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddQuotaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddQuotaUnauthorized creates a AddQuotaUnauthorized with default headers values
func NewAddQuotaUnauthorized() *AddQuotaUnauthorized {
	return &AddQuotaUnauthorized{}
}

/* AddQuotaUnauthorized describes a response with status code 401, with default header values.

Authentication failure. Please check credentials and try again.
*/
type AddQuotaUnauthorized struct {
}

func (o *AddQuotaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaUnauthorized ", 401)
}

func (o *AddQuotaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddQuotaForbidden creates a AddQuotaForbidden with default headers values
func NewAddQuotaForbidden() *AddQuotaForbidden {
	return &AddQuotaForbidden{}
}

/* AddQuotaForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddQuotaForbidden struct {
}

func (o *AddQuotaForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaForbidden ", 403)
}

func (o *AddQuotaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddQuotaNotFound creates a AddQuotaNotFound with default headers values
func NewAddQuotaNotFound() *AddQuotaNotFound {
	return &AddQuotaNotFound{}
}

/* AddQuotaNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddQuotaNotFound struct {
}

func (o *AddQuotaNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaNotFound ", 404)
}

func (o *AddQuotaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddQuotaConflict creates a AddQuotaConflict with default headers values
func NewAddQuotaConflict() *AddQuotaConflict {
	return &AddQuotaConflict{}
}

/* AddQuotaConflict describes a response with status code 409, with default header values.

Owner is already assigned quota
*/
type AddQuotaConflict struct {
	Payload *models.ErrorResponse
}

func (o *AddQuotaConflict) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaConflict  %+v", 409, o.Payload)
}
func (o *AddQuotaConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddQuotaConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddQuotaUnprocessableEntity creates a AddQuotaUnprocessableEntity with default headers values
func NewAddQuotaUnprocessableEntity() *AddQuotaUnprocessableEntity {
	return &AddQuotaUnprocessableEntity{}
}

/* AddQuotaUnprocessableEntity describes a response with status code 422, with default header values.

Error adding Quota
*/
type AddQuotaUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *AddQuotaUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /v1/quotas][%d] addQuotaUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AddQuotaUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddQuotaUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
