// Code generated by go-swagger; DO NOT EDIT.

package data_dictionary_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetDictionaryUsingGETReader is a Reader for the GetDictionaryUsingGET structure.
type GetDictionaryUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDictionaryUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDictionaryUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDictionaryUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDictionaryUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDictionaryUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDictionaryUsingGETOK creates a GetDictionaryUsingGETOK with default headers values
func NewGetDictionaryUsingGETOK() *GetDictionaryUsingGETOK {
	return &GetDictionaryUsingGETOK{}
}

/* GetDictionaryUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetDictionaryUsingGETOK struct {
}

func (o *GetDictionaryUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /datadictionary][%d] getDictionaryUsingGETOK ", 200)
}

func (o *GetDictionaryUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDictionaryUsingGETUnauthorized creates a GetDictionaryUsingGETUnauthorized with default headers values
func NewGetDictionaryUsingGETUnauthorized() *GetDictionaryUsingGETUnauthorized {
	return &GetDictionaryUsingGETUnauthorized{}
}

/* GetDictionaryUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDictionaryUsingGETUnauthorized struct {
}

func (o *GetDictionaryUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /datadictionary][%d] getDictionaryUsingGETUnauthorized ", 401)
}

func (o *GetDictionaryUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDictionaryUsingGETForbidden creates a GetDictionaryUsingGETForbidden with default headers values
func NewGetDictionaryUsingGETForbidden() *GetDictionaryUsingGETForbidden {
	return &GetDictionaryUsingGETForbidden{}
}

/* GetDictionaryUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDictionaryUsingGETForbidden struct {
}

func (o *GetDictionaryUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /datadictionary][%d] getDictionaryUsingGETForbidden ", 403)
}

func (o *GetDictionaryUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDictionaryUsingGETNotFound creates a GetDictionaryUsingGETNotFound with default headers values
func NewGetDictionaryUsingGETNotFound() *GetDictionaryUsingGETNotFound {
	return &GetDictionaryUsingGETNotFound{}
}

/* GetDictionaryUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDictionaryUsingGETNotFound struct {
}

func (o *GetDictionaryUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /datadictionary][%d] getDictionaryUsingGETNotFound ", 404)
}

func (o *GetDictionaryUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
