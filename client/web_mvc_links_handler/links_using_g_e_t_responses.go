// Code generated by go-swagger; DO NOT EDIT.

package web_mvc_links_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// LinksUsingGETReader is a Reader for the LinksUsingGET structure.
type LinksUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinksUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinksUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLinksUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLinksUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinksUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLinksUsingGETOK creates a LinksUsingGETOK with default headers values
func NewLinksUsingGETOK() *LinksUsingGETOK {
	return &LinksUsingGETOK{}
}

/* LinksUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type LinksUsingGETOK struct {
	Payload map[string]map[string]models.Link
}

func (o *LinksUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /actuator][%d] linksUsingGETOK  %+v", 200, o.Payload)
}
func (o *LinksUsingGETOK) GetPayload() map[string]map[string]models.Link {
	return o.Payload
}

func (o *LinksUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinksUsingGETUnauthorized creates a LinksUsingGETUnauthorized with default headers values
func NewLinksUsingGETUnauthorized() *LinksUsingGETUnauthorized {
	return &LinksUsingGETUnauthorized{}
}

/* LinksUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LinksUsingGETUnauthorized struct {
}

func (o *LinksUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actuator][%d] linksUsingGETUnauthorized ", 401)
}

func (o *LinksUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinksUsingGETForbidden creates a LinksUsingGETForbidden with default headers values
func NewLinksUsingGETForbidden() *LinksUsingGETForbidden {
	return &LinksUsingGETForbidden{}
}

/* LinksUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LinksUsingGETForbidden struct {
}

func (o *LinksUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /actuator][%d] linksUsingGETForbidden ", 403)
}

func (o *LinksUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinksUsingGETNotFound creates a LinksUsingGETNotFound with default headers values
func NewLinksUsingGETNotFound() *LinksUsingGETNotFound {
	return &LinksUsingGETNotFound{}
}

/* LinksUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinksUsingGETNotFound struct {
}

func (o *LinksUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /actuator][%d] linksUsingGETNotFound ", 404)
}

func (o *LinksUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
