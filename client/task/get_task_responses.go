// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// GetTaskReader is a Reader for the GetTask structure.
type GetTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTaskOK creates a GetTaskOK with default headers values
func NewGetTaskOK() *GetTaskOK {
	return &GetTaskOK{}
}

/* GetTaskOK describes a response with status code 200, with default header values.

Returns the status of task operation
*/
type GetTaskOK struct {
	Payload *models.TaskInfo
}

func (o *GetTaskOK) Error() string {
	return fmt.Sprintf("[GET /v1/tasks/{id}][%d] getTaskOK  %+v", 200, o.Payload)
}
func (o *GetTaskOK) GetPayload() *models.TaskInfo {
	return o.Payload
}

func (o *GetTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskUnauthorized creates a GetTaskUnauthorized with default headers values
func NewGetTaskUnauthorized() *GetTaskUnauthorized {
	return &GetTaskUnauthorized{}
}

/* GetTaskUnauthorized describes a response with status code 401, with default header values.

Authentication failure. Please check credentials and try again.
*/
type GetTaskUnauthorized struct {
}

func (o *GetTaskUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/tasks/{id}][%d] getTaskUnauthorized ", 401)
}

func (o *GetTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskForbidden creates a GetTaskForbidden with default headers values
func NewGetTaskForbidden() *GetTaskForbidden {
	return &GetTaskForbidden{}
}

/* GetTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTaskForbidden struct {
}

func (o *GetTaskForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/tasks/{id}][%d] getTaskForbidden ", 403)
}

func (o *GetTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskNotFound creates a GetTaskNotFound with default headers values
func NewGetTaskNotFound() *GetTaskNotFound {
	return &GetTaskNotFound{}
}

/* GetTaskNotFound describes a response with status code 404, with default header values.

Task ID doesn't exist
*/
type GetTaskNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetTaskNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tasks/{id}][%d] getTaskNotFound  %+v", 404, o.Payload)
}
func (o *GetTaskNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
