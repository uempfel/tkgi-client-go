// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// CancelTaskReader is a Reader for the CancelTask structure.
type CancelTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCancelTaskCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCancelTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelTaskOK creates a CancelTaskOK with default headers values
func NewCancelTaskOK() *CancelTaskOK {
	return &CancelTaskOK{}
}

/* CancelTaskOK describes a response with status code 200, with default header values.

the task has been cancelled
*/
type CancelTaskOK struct {
	Payload *models.TaskInfo
}

func (o *CancelTaskOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tasks/{id}][%d] cancelTaskOK  %+v", 200, o.Payload)
}
func (o *CancelTaskOK) GetPayload() *models.TaskInfo {
	return o.Payload
}

func (o *CancelTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelTaskCreated creates a CancelTaskCreated with default headers values
func NewCancelTaskCreated() *CancelTaskCreated {
	return &CancelTaskCreated{}
}

/* CancelTaskCreated describes a response with status code 201, with default header values.

Created
*/
type CancelTaskCreated struct {
}

func (o *CancelTaskCreated) Error() string {
	return fmt.Sprintf("[PUT /v1/tasks/{id}][%d] cancelTaskCreated ", 201)
}

func (o *CancelTaskCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelTaskUnauthorized creates a CancelTaskUnauthorized with default headers values
func NewCancelTaskUnauthorized() *CancelTaskUnauthorized {
	return &CancelTaskUnauthorized{}
}

/* CancelTaskUnauthorized describes a response with status code 401, with default header values.

Authentication failure. Please check credentials and try again.
*/
type CancelTaskUnauthorized struct {
}

func (o *CancelTaskUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/tasks/{id}][%d] cancelTaskUnauthorized ", 401)
}

func (o *CancelTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelTaskForbidden creates a CancelTaskForbidden with default headers values
func NewCancelTaskForbidden() *CancelTaskForbidden {
	return &CancelTaskForbidden{}
}

/* CancelTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelTaskForbidden struct {
}

func (o *CancelTaskForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/tasks/{id}][%d] cancelTaskForbidden ", 403)
}

func (o *CancelTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelTaskNotFound creates a CancelTaskNotFound with default headers values
func NewCancelTaskNotFound() *CancelTaskNotFound {
	return &CancelTaskNotFound{}
}

/* CancelTaskNotFound describes a response with status code 404, with default header values.

Task ID doesn't exist
*/
type CancelTaskNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CancelTaskNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tasks/{id}][%d] cancelTaskNotFound  %+v", 404, o.Payload)
}
func (o *CancelTaskNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CancelTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
