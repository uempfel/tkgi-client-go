// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// GetBindingReader is a Reader for the GetBinding structure.
type GetBindingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBindingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBindingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBindingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBindingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBindingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBindingOK creates a GetBindingOK with default headers values
func NewGetBindingOK() *GetBindingOK {
	return &GetBindingOK{}
}

/* GetBindingOK describes a response with status code 200, with default header values.

Binding retrieved
*/
type GetBindingOK struct {
	Payload interface{}
}

func (o *GetBindingOK) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterName}/binds/{userName}][%d] getBindingOK  %+v", 200, o.Payload)
}
func (o *GetBindingOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetBindingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBindingUnauthorized creates a GetBindingUnauthorized with default headers values
func NewGetBindingUnauthorized() *GetBindingUnauthorized {
	return &GetBindingUnauthorized{}
}

/* GetBindingUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBindingUnauthorized struct {
}

func (o *GetBindingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterName}/binds/{userName}][%d] getBindingUnauthorized ", 401)
}

func (o *GetBindingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBindingForbidden creates a GetBindingForbidden with default headers values
func NewGetBindingForbidden() *GetBindingForbidden {
	return &GetBindingForbidden{}
}

/* GetBindingForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBindingForbidden struct {
}

func (o *GetBindingForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterName}/binds/{userName}][%d] getBindingForbidden ", 403)
}

func (o *GetBindingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBindingNotFound creates a GetBindingNotFound with default headers values
func NewGetBindingNotFound() *GetBindingNotFound {
	return &GetBindingNotFound{}
}

/* GetBindingNotFound describes a response with status code 404, with default header values.

Cluster not found
*/
type GetBindingNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetBindingNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterName}/binds/{userName}][%d] getBindingNotFound  %+v", 404, o.Payload)
}
func (o *GetBindingNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBindingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
