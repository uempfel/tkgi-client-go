// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/uempfel/tkgi-client-go/models"
)

// UpgradeClustersReader is a Reader for the UpgradeClusters structure.
type UpgradeClustersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpgradeClustersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpgradeClustersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpgradeClustersAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpgradeClustersNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpgradeClustersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpgradeClustersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpgradeClustersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpgradeClustersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpgradeClustersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpgradeClustersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpgradeClustersOK creates a UpgradeClustersOK with default headers values
func NewUpgradeClustersOK() *UpgradeClustersOK {
	return &UpgradeClustersOK{}
}

/* UpgradeClustersOK describes a response with status code 200, with default header values.

OK
*/
type UpgradeClustersOK struct {
	Payload *models.TaskInfo
}

func (o *UpgradeClustersOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersOK  %+v", 200, o.Payload)
}
func (o *UpgradeClustersOK) GetPayload() *models.TaskInfo {
	return o.Payload
}

func (o *UpgradeClustersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeClustersAccepted creates a UpgradeClustersAccepted with default headers values
func NewUpgradeClustersAccepted() *UpgradeClustersAccepted {
	return &UpgradeClustersAccepted{}
}

/* UpgradeClustersAccepted describes a response with status code 202, with default header values.

Cluster upgrades requested
*/
type UpgradeClustersAccepted struct {
	Payload *models.TaskInfo
}

func (o *UpgradeClustersAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersAccepted  %+v", 202, o.Payload)
}
func (o *UpgradeClustersAccepted) GetPayload() *models.TaskInfo {
	return o.Payload
}

func (o *UpgradeClustersAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeClustersNoContent creates a UpgradeClustersNoContent with default headers values
func NewUpgradeClustersNoContent() *UpgradeClustersNoContent {
	return &UpgradeClustersNoContent{}
}

/* UpgradeClustersNoContent describes a response with status code 204, with default header values.

No Content
*/
type UpgradeClustersNoContent struct {
}

func (o *UpgradeClustersNoContent) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersNoContent ", 204)
}

func (o *UpgradeClustersNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeClustersBadRequest creates a UpgradeClustersBadRequest with default headers values
func NewUpgradeClustersBadRequest() *UpgradeClustersBadRequest {
	return &UpgradeClustersBadRequest{}
}

/* UpgradeClustersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpgradeClustersBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *UpgradeClustersBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersBadRequest  %+v", 400, o.Payload)
}
func (o *UpgradeClustersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpgradeClustersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeClustersUnauthorized creates a UpgradeClustersUnauthorized with default headers values
func NewUpgradeClustersUnauthorized() *UpgradeClustersUnauthorized {
	return &UpgradeClustersUnauthorized{}
}

/* UpgradeClustersUnauthorized describes a response with status code 401, with default header values.

Authentication failure. Please check credentials and try again.
*/
type UpgradeClustersUnauthorized struct {
}

func (o *UpgradeClustersUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersUnauthorized ", 401)
}

func (o *UpgradeClustersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeClustersForbidden creates a UpgradeClustersForbidden with default headers values
func NewUpgradeClustersForbidden() *UpgradeClustersForbidden {
	return &UpgradeClustersForbidden{}
}

/* UpgradeClustersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpgradeClustersForbidden struct {
}

func (o *UpgradeClustersForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersForbidden ", 403)
}

func (o *UpgradeClustersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeClustersNotFound creates a UpgradeClustersNotFound with default headers values
func NewUpgradeClustersNotFound() *UpgradeClustersNotFound {
	return &UpgradeClustersNotFound{}
}

/* UpgradeClustersNotFound describes a response with status code 404, with default header values.

Cluster does not exist
*/
type UpgradeClustersNotFound struct {
	Payload *models.ErrorResponse
}

func (o *UpgradeClustersNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersNotFound  %+v", 404, o.Payload)
}
func (o *UpgradeClustersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpgradeClustersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeClustersMethodNotAllowed creates a UpgradeClustersMethodNotAllowed with default headers values
func NewUpgradeClustersMethodNotAllowed() *UpgradeClustersMethodNotAllowed {
	return &UpgradeClustersMethodNotAllowed{}
}

/* UpgradeClustersMethodNotAllowed describes a response with status code 405, with default header values.

Invalid input
*/
type UpgradeClustersMethodNotAllowed struct {
}

func (o *UpgradeClustersMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersMethodNotAllowed ", 405)
}

func (o *UpgradeClustersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeClustersConflict creates a UpgradeClustersConflict with default headers values
func NewUpgradeClustersConflict() *UpgradeClustersConflict {
	return &UpgradeClustersConflict{}
}

/* UpgradeClustersConflict describes a response with status code 409, with default header values.

Clusters could not be upgraded
*/
type UpgradeClustersConflict struct {
	Payload *models.ErrorResponse
}

func (o *UpgradeClustersConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/clusters][%d] upgradeClustersConflict  %+v", 409, o.Payload)
}
func (o *UpgradeClustersConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpgradeClustersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
